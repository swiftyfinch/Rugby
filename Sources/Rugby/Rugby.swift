import ArgumentParser
import Fish
import RugbyFoundation

extension String {
    static let version = "2.5.0"
    // â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
    // â”‚                                â”‚
    // â”‚       â–ˆâ–€â–ˆâ€ƒâ–ˆâ€ƒâ–ˆâ€ƒâ–ˆâ–€â–€â€ƒâ–ˆâ–„â–„â€ƒâ–ˆâ–„â–ˆ      â”‚
    // â”‚     > â–ˆâ–€â–„â€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–ˆâ€ƒâ€ƒâ–ˆ       â”‚
    // â”‚                 v.2.5.0        â”‚
    // â”‚ Cache Cocoa ðŸŒ± pods            â”‚
    // â”‚             for faster rebuild â”‚
    // â”‚   and indexing Xcode project   â”‚
    // â”‚                                â”‚
    // â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
    static let abstract = """
    â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
    â”‚                                â”‚
    â”‚       \("â–ˆâ–€â–ˆâ€ƒâ–ˆâ€ƒâ–ˆâ€ƒâ–ˆâ–€â–€â€ƒâ–ˆâ–„â–„â€ƒâ–ˆâ–„â–ˆ".accent)      â”‚
    â”‚     \(">".black.bold.onAccent) \("â–ˆâ–€â–„â€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–ˆâ€ƒâ–ˆâ–„â–ˆâ€ƒâ€ƒâ–ˆ".accent)       â”‚
    â”‚                 \("v.\(version)".accent.bold)        â”‚
    â”‚ \("Cache Cocoa ðŸŒ± pods".bold)            â”‚
    â”‚             \("for faster rebuild".bold) â”‚
    â”‚   \("and indexing Xcode project".bold)   â”‚
    â”‚                                â”‚
    â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
    """.white
}

@main
struct Rugby: AsyncParsableCommand {
    static var configuration = CommandConfiguration(
        abstract: String.abstract,
        discussion: Links.docs("README.md"),
        version: String.version,
        subcommands: [
            Shortcuts.self,
            Build.self,
            Use.self,
            Delete.self,
            Warmup.self,
            Test.self,
            Rollback.self,
            Plan.self,
            Clear.self,
            Update.self,
            Doctor.self,
            Shell.self,
            Env.self
        ],
        defaultSubcommand: Shortcuts.self
    )

    static func main() async {
        prepareDependencies()
        do {
            if try printHelp() { return }

            var command = try parseCommand()
            if var asyncCommand = command as? AsyncParsableCommand {
                try await asyncCommand.run()
            } else {
                try command.run()
            }
        } catch {
            exit(withError: error)
        }
    }

    // MARK: - Private

    private static func prepareDependencies() {
        let env = Environment()
        Vault.setupShared(
            env: env,
            logger: Logger(clock: Clock()),
            router: Router(
                workingDirectory: Folder.current,
                sharedFolderPath: env.sharedFolderParentPath
            )
        )
        Vault.shared.processMonitor.monitor()
    }

    private static func printHelp() throws -> Bool {
        if CommonFlags.help.isDisjoint(with: CommandLine.arguments) { return false }
        let commandInfo = try HelpDumper().dump(command: Rugby.self)
        HelpPrinter().print(command: commandInfo)
        return true
    }
}
